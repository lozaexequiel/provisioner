# -*- mode: ruby -*-
# vi: set ft=ruby :
BOX="ubuntu/jammy64"
SCRIPT_REPOSITORY = "https://raw.githubusercontent.com/lozaexequiel/provisioner/main/provision.sh"
DOCKER="https://raw.githubusercontent.com/lozaexequiel/provisioner/main/Docker/provision.sh"
ANSIBLE="provision.sh"
ANSIBLE_PATH="/vagrant_data/.env/.ansible"
ANSIBLE_CONFIG="/vagrant_data/.env/.ansible/.ansible.cfg"
ANSIBLE_INVENTORY="/vagrant_data/.env/.ansible/.inventory"
VAGRANT_PATH = "/vagrant_data"
PROVIDER       = "virtualbox"
NETWORK = "192.168.0"
INTERFACE = "Realtek PCIe GbE Family Controller"
# Define master resources
MASTER_COUNT   = 1
MASTER_MEMORY   = "8192"
MASTER_CPU_COUNT = "4"
# Define node resources
NODE_COUNT   = 1
NODE_MEMORY   = "8192"
NODE_CPU_COUNT = "4"
# Define Vagrant configuration
Vagrant.configure("2") do |config|
	config.vm.box = BOX
	if MASTER_COUNT < 1 and NODE_COUNT < 1 then
		puts "MASTER_COUNT and NODE_COUNT must be greater than 0"
		exit 1
	end
	boxes = []
	(1..MASTER_COUNT).each do |i|
		boxes << { :name => "master-#{i}", :ip => "#{NETWORK}.#{i+10}", :cpus => MASTER_CPU_COUNT, :memory => MASTER_MEMORY, :bridge => INTERFACE }
	end
	(1..NODE_COUNT).each do |i|
		boxes << { :name => "node-#{i}", :ip => "#{NETWORK}.#{i+20}", :cpus => NODE_CPU_COUNT, :memory => NODE_MEMORY, :bridge => INTERFACE }
	end
	boxes.each do |opts|
	  config.vm.define opts[:name] do |box|
	    box.vm.synced_folder ".", VAGRANT_PATH
	    box.vm.hostname = opts[:name]
	    box.vm.network :public_network, ip: opts[:ip]
	    box.vm.provider PROVIDER do |vb|
	      vb.cpus = opts[:cpus]
	      vb.memory = opts[:memory]
	    end	    
	    box.vm.provision "shell", inline: "echo -e \"\ #{opts[:name]} ansible_host=#{opts[:ip]}\" >> #{ANSIBLE_INVENTORY}"
	    box.vm.provision "shell", inline: "curl -sSLf #{SCRIPT_REPOSITORY} | sudo sh"
	    #box.vm.provision "shell", inline: "curl -sSLf #{ANSIBLE} | sudo sh"
	    box.vm.provision "shell", path: ANSIBLE
	    box.vm.provision "shell", inline: "curl -sSLf #{DOCKER} | sudo sh"
	    
#	if box.vm.hostname =~ /master/ then
#		box.vm.provision "shell", inline: "echo 'provisioning' #{box.vm.hostname} ... done"
#	   end
#	if box.vm.hostname =~ /node/ then
#		box.vm.provision "shell", inline: "echo 'provisioning' #{box.vm.hostname} ... done"	
#	end
end
end
end